# -*- coding: utf-8 -*-
"""IEEE_TSTE_2023.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N7CrwFaGFBqwv2JHR7YN7afgX-GgQF0q

# Control Co-Design of Power Take-off Systems for Wave Energy Converters using WecOptTool
Carlos A. **Michelén Ströfer**, Daniel T. **Gaebele**, Ryan G. **Coe**, and Giorgio **Bacelli** (Member IEEE)

IEEE Transactions on Sustainable Energy, [MONTH] 2023

[DOI]
"""

import autograd.numpy as np
import xarray as xr
import matplotlib.pyplot as plt
from matplotlib import cm
import capytaine as cpy
import mhkit.wave.resource as mhkit
from mhkit.wave.io import ndbc
import pandas as pd
import string
from sklearn.cluster import KMeans
from datetime import datetime
from scipy.optimize import brute

import wecopttool as wot


"""## Section 0:Wave Data
"""
from mhkit.wave.io import cdip
import matplotlib.pyplot as plt
station_number ="243"  #"160" #"160"  160 for uNH, 243 for JC Pier
#start_date = "2008-04-01"
#end_date = "2010-02-12"
parameters = ["waveHs", "waveTp"] #, "waveMeanDirection"]

data = cdip.request_parse_workflow(
    station_number=station_number,
    parameters=parameters) #,
#    start_date=start_date,
#    end_date=end_date,
#)
print("\n")
print(f"Returned data: {data.keys()} \n")
data['data']['wave'].keys()
data['data']['wave']['waveHs']
data['data']['wave']['waveTp']
numData=len(data['data']['wave']['waveTp'])
Hm0=data['data']['wave']['waveHs'].values
Tp=data['data']['wave']['waveTp'].values
Te=np.random.uniform(0.83, 0.9, size=len(Tp)) *Tp

data_wave = pd.DataFrame({
    "Hm0": Hm0,
    "Te": Te
})

# clusters
N = 10
sea_states_labels = list(string.ascii_uppercase[0:N])
raster_order = -10
km = KMeans(n_clusters=N, random_state=1).fit(data_wave[["Hm0", "Te"]])
weights = [(km.labels_ == i).sum() / len(km.labels_) for i in range(N)]
sea_states = pd.DataFrame(km.cluster_centers_, columns=["Hm0", "Te"])
rho = 1025
g = 9.81
sea_states["power"] =  (rho*g**2)/(64*np.pi)*(sea_states.Hm0**2)*sea_states.Te / 1000
sea_states["weight"] = weights
sea_states.sort_values("Hm0", inplace=True, ascending=True)
idx = sea_states.index
idx = [int(np.where(idx == i)[0]) for i in np.arange(N)]
idx = [idx[i] for i in km.labels_]
sea_states.reset_index(drop=True, inplace=True)

# representative sea state spectra (JONSWAP)
nfreq = 127
f1 = 0.6/nfreq #0.42/nfreq

gamma = 3.3
waves = []
spectra = []
fp_vec=[]
for i, sea_state in sea_states.iterrows():
    fp = 1 / mhkit.energy_period_to_peak_period(sea_state.Te, gamma)
    Hm0 = sea_state.Hm0
    spectrum = lambda f: wot.waves.jonswap_spectrum(f, fp, Hm0, gamma)
    efth = wot.waves.omnidirectional_spectrum(f1, nfreq, spectrum, "JONSWAP")
    wave = wot.waves.long_crested_wave(efth,nrealizations=1)
    wave.attrs['weight'] = sea_state.weight
    waves.append(wave)
    spectra.append(efth)
    fp_vec.append(fp)

fig, ax = plt.subplots(figsize=(6, 6))
ax.scatter(1/Tp/np.random.uniform(0.99, 1.1, size=len(Tp)), data_wave.Hm0, s=0.1)
ax.set_xlabel("Peak frequency, $f_p$ [Hz]", fontsize=18)
ax.set_ylabel("Significant wave height, $H_{m0}$ [m]", fontsize=18)
ax.tick_params(axis='both', which='major', labelsize=16)
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
plt.show(block=True)

fig, ax = plt.subplots(figsize=(6, 6))
ax.scatter(data_wave.Te, data_wave.Hm0, s=0.1)
ax.set_xlabel("Energy period, $T_e$ [s]", fontsize=18)
ax.set_ylabel("Significant wave height, $H_{m0}$ [m]", fontsize=18)
ax.tick_params(axis='both', which='major', labelsize=16)
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
plt.show(block=True)

#Figure 5
cmap_qualitative = cm.tab10
fig, ax = plt.subplots(1,1, figsize=(6,6))
ax.scatter(data_wave.Te, data_wave.Hm0, c=idx, s=40, cmap=cmap_qualitative, rasterized=True)
ax.scatter(km.cluster_centers_[:, 1], km.cluster_centers_[:, 0], s=40, marker="x", color="w")
for x, y, lbl in zip(sea_states["Te"], sea_states.Hm0, sea_states_labels):
    plt.text(x+0.1, y+0.1, lbl)
ax.set_xlabel("Energy period, T_e [s]")
ax.set_ylabel("Significant wave height, " + "$H_{m0}$ [m]")
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
plt.show(block=True)

cmap_qualitative = cm.tab10
fig, ax = plt.subplots(1,1, figsize=(6,6))
ax.scatter(data_wave.Te, data_wave.Hm0, c=idx, s=40, cmap=cmap_qualitative, rasterized=True)
for x, y, lbl in zip(sea_states["Te"], sea_states.Hm0, sea_states_labels):
    plt.text(x+0.1, y+0.1, lbl)
ax.set_xlabel("Energy period, T_e [s]")
ax.set_ylabel("Significant wave height, " + "$H_{m0}$ [m]")
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
plt.show(block=True)

#Figure 6
plt.figure()
for i in range(len(waves))[::-1]:
    wave = waves[i]
    spectrum = spectra[i]
    f = wave.omega/(2*np.pi)
    plt.plot([f[0], f[-1]], [0, 0], "k-")
    plt.plot(f, spectrum, '-', color=cmap_qualitative.colors[i], marker='.')
    plt.gca().spines['right'].set_visible(False)
    plt.gca().spines['top'].set_visible(False)
    x = f[np.where(spectrum[:,0] == max(spectrum[:,0]))].values
    y = max(spectrum.values)
    plt.text(x, y, sea_states_labels[i])
    plt.xlabel('Frequency [Hz]')
    plt.ylabel('Spectrum, $S$ [m$^2$/Hz]')
    #plt.xlim([0.0, 0.3])
    #plt.ylim([0, 100])
plt.show(block=True)

#plot wave in freq domain
plt.figure(figsize=(10, 6))
for i, wave in enumerate(waves):
    wave.sel(realization=0).pipe(abs).plot(x='freq', label=f"Wave {i}", add_legend=False)
plt.legend(title="Waves")  # Add legend to distinguish different waves
#plt.title("All Waves on the Same Plot")
plt.xlabel("Frequency (Hz)")  # Replace with the appropriate frequency unit
#plt.ylabel()  # Replace with the appropriate label for the y-axis
plt.show(block=True)

#plot wave in time domain
from wecopttool import time_results
from xarray import DataArray
from wecopttool import time
t_dat = time(f1, nfreq, nsubsteps=5)
time_vec_wave= DataArray(data=t_dat, name='time', dims='time', coords=[t_dat])
waves_tdom = [time_results(wave, time_vec_wave) for wave in waves]
plt.figure(figsize=(10, 6))
for i, wave in enumerate(waves_tdom):
    wave.sel(realization=0).plot(label=f" {sea_states_labels[i]}", add_legend=False)
plt.legend(title="Waves",ncol=2)  # Add legend to distinguish different waves
#plt.title("All Waves on the Same Plot")
#plt.xlabel("Frequency (Hz)")  # Replace with the appropriate frequency unit
plt.ylabel("Wave Amp [m]")  # Replace with the appropriate label for the y-axis
plt.xlim([0.0, 20.0]) #limit to 50 s
plt.show(block=True)
